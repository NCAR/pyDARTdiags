
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01_manipulating/plot_duplicates.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01_manipulating_plot_duplicates.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01_manipulating_plot_duplicates.py:


Finding Duplicates in a Observation Sequence
============================================

This example shows how to find duplicates in an observation sequence,
and how to remove them.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

Import the obs_sequence module

.. GENERATED FROM PYTHON SOURCE LINES 12-15

.. code-block:: Python

    import os
    import pydartdiags.obs_sequence.obs_sequence as obsq








.. GENERATED FROM PYTHON SOURCE LINES 16-19

Read in the observation sequence file. In this example we'll use a real obs_seq file,
the NCEP+ACARS.201303_6H.obs_seq2013030306 file that comes with the pyDARTdiags package.
This is 6 hours of observations from March 3, 2013.

.. GENERATED FROM PYTHON SOURCE LINES 19-24

.. code-block:: Python

    data_dir = os.path.join(os.getcwd(), "../..", "data")
    data_file = os.path.join(data_dir, "NCEP+ACARS.201303_6H.obs_seq2013030306")

    obs_seq = obsq.obs_sequence(data_file)








.. GENERATED FROM PYTHON SOURCE LINES 25-26

How many observations are in the sequence?

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python

    num_obs = len(obs_seq.df)
    print(f"Number of observations: {num_obs}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of observations: 317038




.. GENERATED FROM PYTHON SOURCE LINES 30-31

How many of each type of observation are in the sequence?

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: Python

    obs_seq.df.groupby('type')['type'].count()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    type
    ACARS_TEMPERATURE               21276
    ACARS_U_WIND_COMPONENT          21672
    ACARS_V_WIND_COMPONENT          21672
    AIRCRAFT_TEMPERATURE            21576
    AIRCRAFT_U_WIND_COMPONENT       21833
    AIRCRAFT_V_WIND_COMPONENT       21833
    LAND_SFC_ALTIMETER              19781
    MARINE_SFC_ALTIMETER             8234
    MARINE_SFC_SPECIFIC_HUMIDITY     2337
    MARINE_SFC_TEMPERATURE           5838
    MARINE_SFC_U_WIND_COMPONENT      4985
    MARINE_SFC_V_WIND_COMPONENT      4985
    RADIOSONDE_SPECIFIC_HUMIDITY      361
    RADIOSONDE_SURFACE_ALTIMETER       16
    RADIOSONDE_TEMPERATURE            655
    RADIOSONDE_U_WIND_COMPONENT      2194
    RADIOSONDE_V_WIND_COMPONENT      2194
    SAT_U_WIND_COMPONENT            67798
    SAT_V_WIND_COMPONENT            67798
    Name: type, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 34-37

How many duplicates are there in the sequence? Lets pick the columns that we want to compare
to determine if an observation is a duplicate. In this case we'll use latitude, longitude, vertical,
time, observation, and type. We'll use the 'duplicated' method to find the duplicates.

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: Python


    columns_to_compare = ['latitude', 'longitude', 'vertical', 'time', 'observation', 'type']
    num_dups = obs_seq.df.duplicated(subset=columns_to_compare).sum()
    print(f"Number of duplicates: {num_dups}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of duplicates: 1933




.. GENERATED FROM PYTHON SOURCE LINES 43-45

Lets see how many duplicates there are for each type of observation.
We'll use the 'duplicated' method to find the duplicates.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: Python

    for obs_type in sorted(obs_seq.types.values()):
        selected_rows = obs_seq.df[obs_seq.df['type'] == obs_type]
        print(f"duplicates in {obs_type}: ", selected_rows[columns_to_compare].duplicated().sum())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    duplicates in ACARS_TEMPERATURE:  15
    duplicates in ACARS_U_WIND_COMPONENT:  16
    duplicates in ACARS_V_WIND_COMPONENT:  16
    duplicates in AIRCRAFT_TEMPERATURE:  68
    duplicates in AIRCRAFT_U_WIND_COMPONENT:  69
    duplicates in AIRCRAFT_V_WIND_COMPONENT:  69
    duplicates in LAND_SFC_ALTIMETER:  616
    duplicates in MARINE_SFC_ALTIMETER:  217
    duplicates in MARINE_SFC_SPECIFIC_HUMIDITY:  123
    duplicates in MARINE_SFC_TEMPERATURE:  200
    duplicates in MARINE_SFC_U_WIND_COMPONENT:  187
    duplicates in MARINE_SFC_V_WIND_COMPONENT:  186
    duplicates in RADIOSONDE_SPECIFIC_HUMIDITY:  0
    duplicates in RADIOSONDE_SURFACE_ALTIMETER:  0
    duplicates in RADIOSONDE_TEMPERATURE:  0
    duplicates in RADIOSONDE_U_WIND_COMPONENT:  0
    duplicates in RADIOSONDE_V_WIND_COMPONENT:  0
    duplicates in SAT_U_WIND_COMPONENT:  69
    duplicates in SAT_V_WIND_COMPONENT:  82




.. GENERATED FROM PYTHON SOURCE LINES 50-52

Let's look at the duplicates in the 'LAND_SFC_ALTIMETER' type.
We're sorting by latitude to make it easier to see the duplicates.

.. GENERATED FROM PYTHON SOURCE LINES 52-59

.. code-block:: Python


    selected_rows = obs_seq.df[obs_seq.df['type'] == 'LAND_SFC_ALTIMETER']
    duplicate_mask = selected_rows[columns_to_compare].duplicated(keep=False)
    duplicate_rows = selected_rows[duplicate_mask]

    duplicate_rows.sort_values(by='latitude')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>obs_num</th>
          <th>observation</th>
          <th>NCEP_QC_index</th>
          <th>linked_list</th>
          <th>longitude</th>
          <th>latitude</th>
          <th>vertical</th>
          <th>vert_unit</th>
          <th>type</th>
          <th>metadata</th>
          <th>external_FO</th>
          <th>seconds</th>
          <th>days</th>
          <th>time</th>
          <th>obs_err_var</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>313408</th>
          <td>313409</td>
          <td>1016.865887</td>
          <td>15.0</td>
          <td>313408      313410          -1</td>
          <td>40.33</td>
          <td>-22.32</td>
          <td>13.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>313866</th>
          <td>313867</td>
          <td>1016.865887</td>
          <td>15.0</td>
          <td>313866      313868          -1</td>
          <td>40.33</td>
          <td>-22.32</td>
          <td>13.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>313865</th>
          <td>313866</td>
          <td>1014.502434</td>
          <td>15.0</td>
          <td>313865      313867          -1</td>
          <td>42.70</td>
          <td>-17.05</td>
          <td>10.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>313407</th>
          <td>313408</td>
          <td>1014.502434</td>
          <td>15.0</td>
          <td>313407      313409          -1</td>
          <td>42.70</td>
          <td>-17.05</td>
          <td>10.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>310087</th>
          <td>310088</td>
          <td>1013.941448</td>
          <td>15.0</td>
          <td>310087      310089          -1</td>
          <td>45.28</td>
          <td>-12.80</td>
          <td>7.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>270665</th>
          <td>270666</td>
          <td>1009.972271</td>
          <td>15.0</td>
          <td>270665      270667          -1</td>
          <td>26.65</td>
          <td>67.37</td>
          <td>179.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>31140</td>
          <td>150541</td>
          <td>2013-03-03 08:39:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>311873</th>
          <td>311874</td>
          <td>1010.826543</td>
          <td>15.0</td>
          <td>311873      311875          -1</td>
          <td>27.42</td>
          <td>68.62</td>
          <td>148.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>309527</th>
          <td>309528</td>
          <td>1010.826543</td>
          <td>15.0</td>
          <td>309527      309529          -1</td>
          <td>27.42</td>
          <td>68.62</td>
          <td>148.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>32400</td>
          <td>150541</td>
          <td>2013-03-03 09:00:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>274040</th>
          <td>274041</td>
          <td>1010.755425</td>
          <td>15.0</td>
          <td>274039      274042          -1</td>
          <td>27.03</td>
          <td>69.75</td>
          <td>101.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>31140</td>
          <td>150541</td>
          <td>2013-03-03 08:39:00</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>270664</th>
          <td>270665</td>
          <td>1010.755425</td>
          <td>15.0</td>
          <td>270664      270666          -1</td>
          <td>27.03</td>
          <td>69.75</td>
          <td>101.0</td>
          <td>surface (m)</td>
          <td>LAND_SFC_ALTIMETER</td>
          <td>[]</td>
          <td>[]</td>
          <td>31140</td>
          <td>150541</td>
          <td>2013-03-03 08:39:00</td>
          <td>1.0</td>
        </tr>
      </tbody>
    </table>
    <p>1232 rows × 15 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-61

Lets remove all the duplicates from the dataFrame

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: Python

    obs_seq.df.drop_duplicates(subset=columns_to_compare, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

The number of obs has been reduced by the number of duplicates

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: Python

    print(f"Original number of observations: {num_obs}")
    print(f"Number of duplicate observations: {num_dups}")
    print(f"Number of observations after removing duplicates: {len(obs_seq.df)}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Original number of observations: 317038
    Number of duplicate observations: 1933
    Number of observations after removing duplicates: 315105





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.049 seconds)


.. _sphx_glr_download_examples_01_manipulating_plot_duplicates.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_duplicates.ipynb <plot_duplicates.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_duplicates.py <plot_duplicates.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_duplicates.zip <plot_duplicates.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
